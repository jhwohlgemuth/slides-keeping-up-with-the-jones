<section id="es6-feature-arrow-functions">
    <section id="arrow-functions">
        <h3><span style="font-weight:bold;color:#333;background-color:yellow;">ES</span>6 Arrow Functions</h3>
    </section>
    <section id="arrow-functions-comparison" data-menu-title="Language comparison">
        <h3><span style="font-weight:bold;color:#333;background-color:yellow;">ES</span>6 Arrow Functions</h3>
        <p>Language comparison</p>
        <div class="fragment">
            <div>
                <pre><code class="haskell">
    -- Haskell
    addOne = \x -> x + 1
                </code></pre>
            </div>
            <div>
                <pre><code class="elm">
    -- Elm
    addOne = \x -> x + 1
                </code></pre>
            </div>
            <div>
                <pre><code class="reason">
    /* ReasonML */
    let addOne = (x) => x + 1;
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <pre><code class="javascript">
    // JavaScript
    const addOne = x => x + 1;
            </code></pre>
        </div>
    </section>
    <section id="arrow-functions-syntax-0" data-menu-title="0-arity functions">
        <h3>Arrow Functions</h3>
        <p>No arguments (0-arity)</p>
        <div class="fragment">
            <pre><code class="javascript">
    // ES5
    var greet = function() {
        alert('Good Morning');
    };
            </code></pre>
        </div>
        <div class="fragment">
            <pre><code class="javascript">
    // ES6
    const greet = () => alert('Good Morning');
            </code></pre>
        </div>
    </section>
    <section id="arrow-functions-syntax-1" data-menu-title="1-arity functions">
        <h3>Arrow Functions</h3>
        <p>One argument (1-arity)</p>
        <div class="fragment">
            <pre><code class="javascript">
    // ES5
    var isEven = function(num) {
        return num % 2 === 0;
    };
            </code></pre>
        </div>
        <div class="fragment">
            <pre><code class="javascript">
    // ES6
    const isEven = num => (num % 2 === 0);
            </code></pre>
        </div>
        <div class="fragment">
            <pre><code class="javascript">
    // Default values
    const foo = (val = 42) => console.log(val);
    foo(9001);// 9001
    foo();// 42
            </code></pre>
        </div>
    </section>
    <section id="arrow-functions-syntax-more-than-one" data-menu-title="n-arity functions">
        <h3>Arrow Functions</h3>
        <p>Multiple arguments (n-arity, n > 1)</p>
        <div class="fragment">
            <pre><code class="javascript">
    // ES5
    var add = function(a, b) {
        return a + b;
    };
            </code></pre>
        </div>
        <div class="fragment">
            <pre><code class="javascript">
    // ES6
    const add = (a, b) => a + b;
            </code></pre>
        </div>
    </section>
    <section id="arrow-functions-syntax-higher-order" data-menu-title="Higher order functions">
        <h3>Arrow Functions</h3>
        <p>Higher order functions (ex: currying)</p>
        <div class="fragment">
            <pre><code class="javascript">
    // ES5
    var add = function(a) {
        return function(b) {
            return a + b;
        };
    };
            </code></pre>
        </div>
        <div class="fragment">
            <pre><code class="javascript">
    // ES6
    const add = a => b => a + b;
            </code></pre>
        </div>
        <div class="fragment">
            <pre><code class="javascript">
    // usage
    const addFive = add(5);
    add(1)(2) === 3;// true
    addFive(6) === 11;// true
            </code></pre>
        </div>
    </section>
    <section id="arrow-functions-in-action" data-menu-title="Arrow functions in action">
        <h3>Arrow Functions in Action</h3>
        <div class="fragment">
            <pre><code class="javascript">
    // NO-OP
    const noop = () => {};
            </code></pre>
        </div>
        <div class="fragment">
            <pre><code class="javascript">
    // Identity
    const identity = val => val;
            </code></pre>
        </div>
        <div class="fragment">
            <pre><code class="javascript">
    // "immutable" arrays
    const concat = (a, b) => [...a, ...b]
            </code></pre>
        </div>
        <div class="fragment">
            <pre><code class="javascript">
    // Multi-line functions
    const isValid = val => {
        const MIN = 42;
        const MAX = 9000;
        return (val >= MIN) && (val <= MAX);
    };
            </code></pre>
        </div>
    </section>
    <section id="remember-non-binding-of-this" data-menu-title="Non binding of this">
        <h3>Things to remember</h3>
        <p>Non-binding of <code>this</code></p>
        <pre><code class="javascript">
    let Brain = function() {this.thought = 'I love ES';};
        </code></pre>
        <div class="fragment">
            <pre><code class="javascript">
    // YEP
    Brain.prototype.think = function() {
        console.log(this.thought);
    };
    const myBrain = new Brain();
    myBrain.think();// 'I love ES'
            </code></pre>
        </div>
        <div class="fragment">
            <pre><code class="javascript">
    // NOPE
    Brain.prototype.think = () => {
        console.log(this.thought);
    };
    const myBrain = new Brain();
    myBrain.think();// this is not defined
            </code></pre>
        </div>
    </section>
    <section id="remember-non-binding-of-arguments" data-menu-title="Non binding of arguments">
        <h3>Things to remember</h3>
        <p>Non-binding of <code>arguments</code></p>
        <div class="fragment">
            <pre><code class="javascript">
    // YEP
    const repeat = function() {
        console.log(Array.prototype.slice.call(arguments));
    };
    repeat('foo', 'bar');// ['foo', 'bar']
            </code></pre>
        </div>
        <div class="fragment">
            <pre><code class="javascript">
    // NOPE
    const repeat = () => {
        console.log(Array.prototype.slice.call(arguments));
    };
    repeat('foo', 'bar');// arguments is undefined
            </code></pre>
        </div>
    </section>
    <section id="remember-returning-objects" data-menu-title="Returning objects">
        <h3>Things to remember</h3>
        <p>Add <code>(...)</code> when returning objects directly</p>
        <div class="fragment">
            <pre><code class="javascript">
    // YEP
    const getOptions = () => ({
        color: 'blue',
        size: 'small'
    });
    getOptions();// {color: 'blue', size: 'small'}
            </code></pre>
        </div>
        <div class="fragment">
            <pre><code class="javascript">
    // NOPE
    const getOptions = () => {
        color: 'blue',
        size: 'small'
    };
    getOptions();// undefined
            </code></pre>
        </div>
    </section>
    <section id="arrow-functions-eslint-rules" style="text-align:left;">
        <h3 style="text-align:center;margin-bottom:1em;"><span style="font-weight:bold;color:#333;background-color:yellow;">ES</span>Lint Rules for Arrow Functions</h3>
        <pre><code class="javascript">
    rules: {
        'arrow-body-style': ['error', 'as-needed'],// autofix
        'arrow-parens': ['error', 'as-needed'],// autofix
        'array-bracket-spacing': ['warn']// autofix
    }
        </code></pre>
        <ul style="padding-left:2em;">
            <li><a href="https://eslint.org/docs/rules/arrow-body-style">arrow-body-style</a></li>
            <li><a href="https://eslint.org/docs/rules/arrow-parens">arrow-parens</a></li>
            <li><a href="https://eslint.org/docs/rules/array-bracket-spacing">array-bracket-spacing</a></li>
        </ul>
    </section>
</section>
