<section id="functional-programming-concepts">
    <section id="three-tees-of-functional-programming" data-markdown>
        ### The 3 "T's" of Functional Programming
        > Become "functionally" functional with...

        - composabili-**TEE**
        - immutabili-**TEE**
        - puri-**TEE**

    </section>
    <section id="composability" >
        <h2>Composability</h2>
        <blockquote>
            Build functions with functions
        </blockquote>
        <pre class="fragment"><code>
    let isNumberLike = val => !isNaN(Number(val));

    console.log(isNumberLike(3));//true
    console.log(isNumberLike('42'));//true
    console.log(isNumberLike('foo'));//false
        </code></pre>
        <div class="fragment">
            Those that work with me might expect something like...
            <pre><code>
    // require lodash functions
    const {flow, toNumber, negate} = require('lodash');

    let isNumberLike = flow(toNumber, negate(isNaN));
            </code></pre>
        </div>
    </section>
    <section id="modularity" style="margin: 0 25%;">
         <div class="tumblr-post" data-href="https://embed.tumblr.com/embed/post/dcJpVAvYGPYFZ1ntlGckfg/149273556583" data-did="da39a3ee5e6b4b0d3255bfef95601890afd80709"><a href="https://jhwohlgemuth.tumblr.com/post/149273556583">https://jhwohlgemuth.tumblr.com/post/149273556583</a></div>  <script async src="https://assets.tumblr.com/post.js"></script>
    </section>
    <section id="immutability">
        <h2>Immutability</h2>
        <blockquote>
            Favor immutable patterns
        </blockquote>
        <pre><code>
    // mutation
    let arr = [1, 2, 3, 4, 5];
    arr.push(6);
    console.log(arr);// [1, 2, 3, 4, 5, 6]
        </code></pre>
        <pre><code class="javascript">
    // no mutation...?
    let oldArr = [1, 2, 3, 4, 5];
    let newArr = oldArr.concat(6);
        </code></pre>
        <pre class="fragment"><code class="javascript">
    // no mutation!
    console.log(oldArr);// [1, 2, 3, 4, 5]
    console.log(newArr);// [1, 2, 3, 4, 5, 6]
        </code></pre>
    </section>
    <section id="immutability-loops">
        <h2>Immutability</h2>
        <blockquote>
            Favor immutable patterns
        </blockquote>
        <pre><code class="javascript">
    // mutation
    let nums = [1, 2, 3, 4, 5];
    for(var i = 0; i < nums.length; i++) {
        nums[i] = nums[i] + 1;
    }
        </code></pre>
        <pre><code class="javascript">
    // no mutation...?
    let oldNums = [1, 2, 3, 4, 5];
    let newNums = oldNums.map(num => ++num);
        </code></pre>
        <pre class="fragment"><code class="javascript">
    // no mutation!
    console.log(oldNums);// [1, 2, 3, 4, 5]
    console.log(newNums);// [2, 3, 4, 5, 6]
        </code></pre>
        <aside class="notes">I had to look up how to use for blocks to write the first snippet</aside>
    </section>
    <section id="immutability-immutablejs" data-background-iframe="https://facebook.github.io/immutable-js/">
        <span style="color: black;">...more on this later.</span>
    </section>
    <section id="purity">
        <h2>Purity</h2>
        <blockquote>
            Find balance between arity and state
        </blockquote>
        <pre class="js fragment"><code>
    let foo = () => console.log('bar');
    let obj = {foo};
        </code></pre>
        <pre class="fragment"><code>
    // NOT PURE
    let triggerFooNotPure = () => obj.foo();
        </code></pre>
        <pre class="js fragment"><code>
    // PURE
    let triggerFooPure = (obj) => obj.foo();
        </code></pre>
        <pre class="fragment"><code class="javascript">
    // pure functions generally have higher "arity"
    triggerFooNotPure();
    triggerFooPure(obj);
        </code></pre>
    </section>
    <section id="purity-redux" data-background="img/redux-js-org.png">
        <span style="color: black; background-color: rgba(255, 255, 255, 0.9);padding: 10px;border-radius: 10px;">...more on this later.</span>
    </section>
    <section id="fp-cheatsheet" style="margin: 0 25%; transform: scale(1.1);">
        <blockquote class="twitter-tweet" data-lang="en">
            <p lang="en" dir="ltr">JS Functional Programming Array.prototype cheat sheet <a href="https://t.co/diGW4FaOso">pic.twitter.com/diGW4FaOso</a></p>&mdash; Jason Wohlgemuth (@jhwohlgemuth) <a href="https://twitter.com/jhwohlgemuth/status/862812187282296833">May 11, 2017</a>
        </blockquote>
        <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
    </section>
</section>
